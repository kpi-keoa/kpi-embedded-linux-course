==========================================================
**Лабораторна робота №2 Засоби відкладеної обробки, аллокація пам'яті**
==========================================================


**Завдання:**
~~~~~~~~~~~~~
 
* Написати та зібрати власний модуль ядра, який:            
    * приймає два параметри, ``cnt`` та ``delay``:        
		* ``cnt`` є кількістю циклів роботи таймера;        
    	* ``delay`` є затримкою між двома спрацюваннями таймера.        
    * На початку ``init`` друкує поточне значення jiffies в лог ядра.        
    * Потім запускає тасклет, який робить те саме.        
    * Динамічно виділяє пам'ять під масив розмірністю ``cnt`` та типом даних для jiffies        
    * потім init запускає таймер, який спрацьовує через проміжки часу delay cnt разів та складає значення jiffies при спрацюванні у масив.        
    * При вигрузці модуля потрібно зупинити таймер та надрукувати ту частину масиву, яку він встиг заповнити, і попередження у тому разі, якщо масив заповнений не весь.        

**Хід роботи:**
~~~~~~~~~~~~~~~
За основу власного модуля взято код демонстраційного модуля із лекції.  
Після прочитання документації, процес модифікації коду був неважкий:
пару нових заголовків, трохи копіпасти з них, додані нові параметри, потім модуль був відлагоджений методом проб та помилок, 
прибрані помилки компілятора, прибрана kernel panic при запуску модуля без параметрів шляхом накладання обмежень на ці параметри,
прописана обробка помилок і все.       

**Використані бібліотеки**
--------------------------

 * ``<linux/module.h>``         тут загальні макроси для модулів               
 * ``<linux/moduleparam.h>``    тут все для параметризації                    
 * ``<linux/kernel.h>``         тут заголовки ядра          
 * ``<linux/init.h>``           тут все для [де]ініціалізації          
 * ``<linux/jiffies.h>``        тут лічильник та допоміжні функції          
 * ``<linux/slab.h>``           тут і          
 * ``<linux/mm.h>``             тут засоби алокації пам'яті          
 * ``<linux/timer.h>``          тут таймер та засоби керування          
 * ``<linux/interrupt.h>``      тут тасклети          
 



Висновки
~~~~~~~~

Було зібрано свій модуль ядра, що відповідає завданню та перевірено його працездатність, вивчена документація на процес розробки модулів ядра.           
Jiffies в init та tasklet відрізняється, тому що від початку ініціалізації до запуску тасклету проходить чимало часу, за цей час потік модуля міг перериватися або взагалі витіснятися іншими потоками.         
Для виділення памяті в init був використаний флаг GFP_KERNEL, тому що init не в контексті переривання та може спати без негативних наслідків.         
різниця jiffies між запусками таймера була від delay+2 до delay+4 і присутня задля зручності планування, коли два таймера можуть відпрацювати у один слот часу, якщо спрацьовують у межах кількох слотів одне від одного.         
При delay рівним нулю таймер буде відпрацьовувати з мінімальною затримкою, зазвичай це 1 такт.          




