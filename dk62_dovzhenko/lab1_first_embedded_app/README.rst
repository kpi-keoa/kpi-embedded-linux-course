==========================
Звіт з лабораторної роботи
==========================
Лабораторна робота №1: "Перший Embedded додаток"
________________________________________________

Хід роботи
~~~~~~~~~~
1. Першим кроком було завантажино на SD-карту Debian Stretch for BeagleBoard образ [1]_.

2. Після попередньої операції, дану SD-карту було вставлено в плату BBXM і підключено живлення, що дорівнює 5В.

3. Потім потрібно виставити ІР-адрес (в даному випадку це *192.168.7.1/24*). Для перевірки того, що підключення відбулося впадло, було використано команду:

.. code-block:: 

  ping 192.168.7.2

4. Наступним завданням було підключитися до BBXM по ssh, використовуючі стандартний логін і пароль. Команда для підключення наведенна нижче:

.. code-block:: c

  ssh debian@192.168.7.2

5. Наступною задачою для виконання лабораторної роботи, було свторення програми на мові програмування С.
**Умова задачі**: потрібно написати програма, яка використовує два потока і кожний з них збільшує значення глобальної зміної на 1 в циклі.
Цю дію потрібно виконувати 100000000 разів, а в кінці використати метод join і вивсти отримане значення. За допомогою ``Makefile`` зібрати з флагами ``-O0`` 
та ``-O2``.

6. Програма

Опис програми
~~~~~~~~~~~~~~~~
Для того, щоб виконувати роботу з потоками потрібно використовувати бібліотеку <pthread.h>. ``Pthreads`` визначає набір типів даних, функцій і констант в 
форматі мови програмування C. Всі процедури Pthreads мають назви з префіксом "pthread_".
В таблиці нижче, наведені функції, які використовувалися для роботи з потоками.
  
  .. list-table:: **Функції для потоків**
   :widths: 15 10 
   :header-rows: 1

   * - Назва функції
     - Призначення 
   * - pthread_t
     - дескриптор потоку   
   * - pthread_create()
     - створення потоку
   * - pthread_join()
     - блокування потоку до завершення іншого потоку, вказаного у виклиці функції

В даному коді було створенно два потока:

.. code-block:: с
 
  pthread_t thread_1, thread_2;
  pthread_create(&thread_1,NULL,stream, NULL);
  pthread_create(&thread_2,NULL,stream, NULL);

Функція *stream* дозволяє виконувати цикл, що інкрементує значення глобальної переміної. Опис функції наведенно нижче.

.. code-block:: с

  void *stream() 
  {
	  for (stream_cnt = 0; stream_cnt < N; stream_cnt++);
  }

де 

.. code-block:: с

  #define N 100000000

Для того, щоб не виклакати наступний потік, до того, як закінчиться заданий працювати, використовується метод *join*. В нашому випадку потрібно
почекати поки два потока закінчуть свої дії.

.. code-block:: с

	pthread_join(thread_1,NULL);
	pthread_join(thread_2,NULL);


Для того, щоб порахувати побачити скільки потрібно часу на виконання програми, створюється структура, що буде зберігати, коли програма почала праюцвати
та закінчила, а також потрібна змінна, яка буде зберігати час виконання:

.. code-block:: с

	struct timespec start, stop; // for time
	long int tt;

Для того, щоб запам'ятати точне значення часу, потрібно використовувати функцію *clock_gettime()*

.. code-block:: с

	clock_gettime (CLOCK_REALTIME, &start);

**CLOCK_REALTIME** - це годинник реального часу, який є видимим для всіх процесів, що працюють в системі. Дане значення було покладено в змінну **start**.
Аналогічно зробити з наступним потрібним часом, а саме коли програма закінчила свою роботу, і знайшли різницю, що дорівнює
часу виконання роботи:

.. code-block:: с

	lock_gettime (CLOCK_REALTIME, &stop);
	tt=((stop.tv_nsec - start.tv_nsec)/1e3);


Повний код знаходиться в директорії **src**.

Компіляція
~~~~~~~~~~~

Для компіляції було створено ``Makefile``.
**Makefile** - це набір інструкцій, для програми make, яка допомагає зібрати програмний проект.

Компіляцію виконуємо з використанням, таких флажків, як:

.. code-block::

  CFLAGS = -O0 -Wall -Wextra -Wpedantic  -lpthread -save-temps -fverbose-asm -std=gnu99
 
де

  * ``-O0`` - флаг оптиміції. Цей флаг означає відключення оптимізації, і основна ціль являю собою високу шкидкість компіляції;
  * ``-O2`` - флаг оптимізації (використовується також в цьому файлі але пізніше), включає майже всі доступні оптимізації;
  * ``-save-temps`` - флаг для перегляду асемблерських листів;
  * ``-lpthread`` - для того, щоб підключити бібліотеку Pthread до програми.


7. Кінцевим етапом є запуск коду на платформі х86 та платі з різними оптимізаціями. 

**Результати:**

.. list-table:: **х86**
  :widths: 15 10 
  :header-rows: 1

  * - -О0
    - 427719 us
  * - -O2
    - 304us   

Виористана література:
~~~~~~~~~~~~~~~~~~~~~~

.. [1] https://beagleboard.org/latest-images






