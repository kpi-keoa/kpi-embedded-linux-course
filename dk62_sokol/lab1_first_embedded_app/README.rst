=====================
Лабораторна робота №1
=====================
**Завдання:**

* Нужно написать на С программу, которая:

* запускает два потока (используя pthread);

* каждый поток увеличивает значение глобальной переменной на 1 в цикле 100000000 раз

* в конце делает join потоков и выводит полученное значение переменной

* собрать с флагами -O0 и -O2 для x86 и для платы

* сравнить и объяснить полученные результаты

---------------------

**Хід роботи:**

* Для початку необхідно розархівувати та записати на SD-карту операційну систему Debian Stretch for BeagleBoard.
  Виконується за допомогою команди:
.. code-block::

  sudo sh -c "xz --decompress --keep --stdout bbxm-debian.img.xz | dd status=progress bs=4M of=/dev/mmcblk1; sync"

* Далі вставляємо SD-карту в ВВХМ та підключаємо джерело живлення.

* Переконуємось, що софтверний USB-хаб *ID 1d6b:0104 Linux Foundation Multifunction Composite Gadget* присутній.
  Для цього виконуємо команду "lsusb"

* Налаштовуємо IP адресс вручну (192.168.7.1/24). 

* Перевіряємо, що мережеві пакети доходять нормально за допомогою команди *ping 192.168.7.2*

* Підключаємось до ВВХМ по ssh. Пароль: *temppwd*, Логін: *debian*.
  Виконуємо команду "*ssh debian@192.168.7.2*" після чого вводимо пароль.

* Програма була скомпільована з прапорами -O0 та -O2 та запущена в архітектурі x86 та ARM.

* В процесі розробки програми за допомогою gnuplot було створено графік залежності, де вісь абсцис є змінна(до якої доходить цикл функції потоку "*result*"), а вісь ординат кількість правильних результатів(максимум 10) 
  Результати наведені нижче:

  **Використовуючи затримку в 1 мікросекунку для х86:**

	.. image:: img/x86+sleep.png


  **Не використовуючи затримку для х86:**

	.. image:: img/x86-sleep.png

  **Використовуючи затримку в 1 мікросекунку для ARM:**

	.. image:: img/ARM+sleep.png  (буде подано після експериментів на даній платформі)


  **Не використовуючи затримку для ARM:**

	.. image:: img/ARM-sleep.png  (буде подано після експериментів на даній платформі)

---------------------

**Висновок:**

Отже для платформи х86 можна зробити висновок, що правильніший результат можна отримати не використовуючи затримку. Це відбувається за рахунок того, що з'являються тимчасові збої та помилки, які викликані тим, що було використано спільну глобальну змінну.




