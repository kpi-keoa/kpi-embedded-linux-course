==============================
Сопіра Руслан Янович
==============================


#. Що таке Git та для чого використовується? Як створити новий локальний репозиторій Git? Наведіть команди.

	 - В загальному Git - це система контролю версій. Новий локальний репозиторій створюється, наприклад, командою ``git init`` або ``git clone <repo>``, якщо потрібно мати локальну копію уже створеного кимось репозиторію.
	 
#. Гілки в Git: для чого використовуються, який принцип роботи з гілками. Наведіть команди для створення нової гілки та переключення між гілками.

	 - Гілки в основному використовуються для відокремленної розробки частин програми.
	 
	     - Створення нової гілки: ``git checkout -b <name>``
	   
	     - Видалення гілки: ``git branch -d <name>``
	   
	     - Переключення між гілками: ``git checkout <name>``
	 
#. Прокоментуйте (за допомогою коментарів Make) Makefile що використовується для збірки модулів ядра в курсі.
   Що відбувається в кожній строчці?
   
   - xxx
   
#. Для чого використовуються ramdisk (initramfs)? Наведіть приклад сценарію реального використання.
   Що таке bzImage, його історія та для чого він використовується.
   
   - Основне використання - монтування кореневої файлової системи та виконання необхіднихналаштувань.
     bzImage фактично є стиснутим двійковим образом ядра. Зазвичай ядро може мати досить значний об'єм і історично не всі архітектури були взмозі його зберігати.

#. Чи можна використовувати операції з плаваючою крапкою в модулях ядра? Якщо так, коли це доцільно? Якщо ні, чому?

	 - Якщо потрібно використовувати числа с плаваючою комою, модуль повинен забезпечити доступність FPU на момент виконання операцій з такими числами (ex. ``kernel_fpu_begin() ... kernel_fpu_end()``). Але такий підхід не є ефективним як мінімум через те, що машина на якій працює ядро може взагалі не мати FPU.
	 
#. В якому порядку виконуються алокації та деалокації в модулях ядра. Наведіть приклад коду з обробкою виключень, якщо невдалось виділити певний ресурс. (з використанням goto)

   - Деалокації відбуваються в обернено алокаціям:
   
.. code-block:: 

   uint8_t ret_val = 0;
   
   char *str1 = kmalloc(...);
   if (NULL == str1) {
           ret_val = 1;
           goto exit;
   }
   
   char *str2 = kmalloc(...);
   if (NULL == str2) {
           ret_val = 2;
           goto dealloc_str2;
   }
   
   char *str3 = kmalloc(...);
   if (NULL == str3) {
           ret_val = 3;
           goto dealloc_str3;
   }
   
   do_something(...);
   
   dealloc_str3:
           kfree(str2);
   dealloc_str2:
           kfree(str1);
   exit:
           return ret_val;

#. Фізична та віртуальна пам'ять ядра, в чому різниця та як це реалізовано?
   Які функції ядро надає (основні) для виділення та вивільнення пам'яті кожного з цих типів?
   
   - xxx
   
#. Що таке callback-функції та для чого використовуються? Наведіть приклад використання container_of у callback-функції

	 - callback-функції - функції, що передаються у якості аргументів до інших функцій.
   
.. code-block::

   struct __obj {
       int a;
       int b;
   } obj;
   
   int foo_a(void)
   {
       int *ptr = &obj.a;
       struct __obj *nums_ptr;
       nums_ptr = container_of(ptr, struct __obj, a);
       
       return *ptr;
   }
   
   int foo_b(void)
   {
       int *ptr = &obj.b;
       struct __obj *nums_ptr;
       nums_ptr = container_of(ptr, struct __obj, b);
       
       return *ptr;
   }
   
   void print(int (*func)(void))
   {
       printf("\n", func());
   }
   
   int main(void)
   {
       print(&foo_a);
       print(&foo_b);
   }
	 
