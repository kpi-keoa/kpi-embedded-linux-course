==============================
Ромах Віталій Ігорович
==============================


#. Для чого слугує файл .gitignore? Наведіть його синтаксис для виключення всіх файлів з розширенням .o в усіх директоріях та
   директорії build в корені репозиторію

   -Відповідь
   .gitignore необхідний для приховування певних файлів та папок від системи контролю версій Git. Наприклад щоб приховати тимчасові файли або файли пілся компіляції, якщо ми хочимо додати до репозиторію тільки вихідний код.
   Приклад 

   ``` 
   # Ігнорувати всі файли з розширенням .о
   *.o
   # Ігнорувати папку build
   /build/
   ```

#. Який формат опису повідомлень комітів використовується в курсі? Навіщо потрібно дотримуватися певного формату?
   Наведіть приклад команди, що додає до репозиторію коміт з важливими виправленнями кодової бази

   -Відповідь
   В курсі використовується формат опису Conventional Commits 1.0.0. Використання цього формату сппрощує створення автоматизовних інструментів які використовуються разом з Git. Також цей формат дозволяє описати комміти різних типів за допомогою нескладних правил. Використання одного стилю спрощує роботу в команді, адже буде набагато легше та простіше зрозуміти що змінилося.  
  
    ```
   fix: missing files added
   ```

#. Є невелика програма (на стадії розробки), що збирається для GNU/Linux оточення та складається з вихідних файлів
   main.c dep.c та заголовку dep.h. Наведіть команду для збірки у бінарний файл prog. При збірці використовується компілятор
   GCC з другим рівнем оптимізації, код написано за стандартом C18 з розширеннями GNU. При компіляції необхідно побачити всі
   можливі попередження (warning). Який флаг необхідно додати, аби трактувати warning як error

   -Відповідь
  
   ```
   gcc -std=gnu18 -O2 -Wall -Werror dep.c main.c -o prog
   ```

#. Завантаження, вивантаження, виведення списку завантажених модулів ядра та інформації про певний модуль ядра.
   Наведіть команди.
	
   -Відповідь
   ```
   # Завантаження модуля 
   insmod moduleName.ko
   # Вивантаження модуля
   rmmod moduleName
   # Виведення списку завантаженних модулів
   lsmod
   # Інформація про модуль
   modinfo moduleName.ko
   # Якщо необхідно завантажити декліька модулів які взаємопов'язані використовується modprobe
   modprobe moduleName
   ```

#. Чи можна використовувати операції з плаваючою крапкою в модулях ядра? Якщо так, коли це доцільно? Якщо ні, чому?

   -Відповідь
   Модуль ядра може використовувати оперцації з плаваючою точкою, проте цей процес скалдніший ніж у звичайних програм, адже модулю необхідно самому отримати доступ до Floating Point Unit. Намагатися отримати доступ до FPU доцільно використовувати тоді, коли для отримання необхідного результату відпарцювання программи недостатньо чисел з фіксованою точкою або коли неможливо отримати резултат за допомогою інших хаків. Операції з плаваючою точкою дуже повільні, тому розробники намагаються їх уникати по можливості.

#. printk та його більш сучасні аналоги. Наведіть приклад використання (з форматуванням unsigned 32-bit integer та string)

   -Відповідь
   printk, ця функція використовується для виведення повідомлень в лог ядра. Для printk є аналог pr_* (pr_info(), pr_debug(), pr_err() та інші) для зміни рівня повідомлень лога. 

   ```
   # Форматування unsigned 32-bit integer
   printk("%u",variable);
   # Форматування string
   printk("%s",string);
   ```

#. Які флаги ви знаєте для алокації пам'яті за допомогою kmalloc? Наведіть приклад виділення пам'яті за допомогою
   kmalloc в коді контексту ядра та контексту переривання.

   -Відповідь
    Флаги:
    GFP_KERNEL - нормальне виділення пам'яті ядра
    GFP_ATOMIC - виділення пам'яті в обробниках переривань
    
    ```
    # Контекст ядра
    unsigned int *array = kmalloc(255 * sizeof(int), GFP_KERNEL);
    # Контекст переривання
    unsigned int *array = kmalloc(255 * sizeof(int), GFP_ATOMIC );
    ```

#. Що таке Soft IRQ та які обмеження він накладає на відповідний код? Опишіть коротко.
   Які з вивчених механізмів відкладеної роботи виконуються в Soft IRQ?
	



