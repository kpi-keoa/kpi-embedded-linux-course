==============================
**Домашня контрольна робота**
==============================

**Завдання:**
~~~~~~~~~~~~~
Написати програму, яка:
    * Приймає аргументи командного рядка. Для парсингу використати *Argp*.
    * Збирається за допомогою *Make*. *Makefile* містить додаткові цілі *build* і *clean*, де *build* є метою-посиланням на основну, а *clean* – PHONY-метою, що очищає всі артефакти складання.
    * Виводить результат у *stdout*, а помилки – у *stderr*.
    * Містить частину службових функцій, винесених в окремий модуль *utils* (*utils.c* та *utils.h*).
    * Використовує прапорець *--verbose* (*-v*), який змушує програму виводити виконувані дії детально. Інакше вважається, що її висновок використовуватиметься іншою прогамою.
    * Повертає *exit code 0* у разі успішного завершення, відповідний код помилки інакше. Для визначення помилок використати *enum*.
    * Використовує об'єктний стиль коду для внутрішніх конструкцій, що реалізують основний функціонал.
    * Програма приймає довільну кількість координат X Y для точок та виводить координати центральної (рівновіддаленої від інших) точки, а також (якщо вказано прапор *--dist*) відстані до них.

**Хід роботи:**
~~~~~~~~~~~~~~~

    * Був створений *Makefile* із цілями *build* та *clean*. Основна ціль *all* посилається на *build*.
    * Програма була оформлена у вигляді декількох файлів.
    * Частина службових функцій винесена в окремий модуль *utils* (*utils.c* та *utils.h*).
    * У головному source-файлі *dkr.c* відбувається оброблення аргументів командної строки та виклик необхідних функцій.
    * Є можливість використовувати прапорці *--verbose* (*-v*) та/або *--dist* згідно завдання.
    * Також є можливість використати прапорець *--help*, що виведе інформацію про програму, або дана інформація буде виведена, якщо запустити програму без параметрів.
    * Виконується перевірка на правильність формату введення координат точки (якщо була введена тільки одна координата, програма припинить роботу).
    * Результат роботи програми виводиться у *stdout*, а помилки – у *stderr*.
    * Перелік можливих помилок заданий за допомогою *enum*.
    * Загалом був використаний об'єктний стиль коду для внутрішніх конструкцій, що реалізують основний функціонал.
    * Була написана реалізація інструментів для створення та взаємодії з масивом точок, що значно збільшує зручність написання коду.

**Алгоритм пошуку рівновіддаленої точки:**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    * Якщо точка одна, то завершуємо програму.
    * Якщо точок дві, то знаходимо точку, що знаходиться посередині між ними. Та знаходимо відстань від знайденої точки до однієї із початкових.
    * Якщо точок три і більше, то описуємо навколо них коло, знаходимо його центр та радіус. Якщо точки знаходяться на одній прямій, то коло побудувати неможливо. Інакше перевіряємо належність інших точок знайденому колу. Якщо всі точки лежать на колі, то рівновіддалена точка знайдена (центр кола).

**Результат:**
~~~~~~~~~~~~~~

.. code-block:: bash

    Запуск без аргументів.

    ./dkr.o
    No arguments!

    This program accepts an arbitrary number
    of X Y coordinates for points and displays the coordinates
    of the central (equidistant from the rest) point.
    Arguments:
            --verbose (-v)  The program displays the performed actions in detail.
            --dist          The program displays the distance from an equidistant
                            point to other points.
            --help          View help.

    Input example: ./dkr.o -v --dist 0 0 10 0

    Простий приклад для двох точок.

    ./dkr.o --dist -v 0 0 2 2
    -v captured
    argv[0] = ./dkr.o
    argv[1] = --dist
    argv[2] = -v
    argv[3] = 0
    argv[4] = 0
    argv[5] = 2
    argv[6] = 2
    argc = 7
    [Point_0] X 0.000000, Y 0.000000
    [Point_1] X 2.000000, Y 2.000000
    [Point_2] X 1.000000, Y 1.000000
    Equidistant point and distance (if --dist is available):
    1.000000 1.000000
    1.414214

    Квадрат з стороною 1 в першій чверті координатної площини.

    ./dkr.o 0 0 0 1 1 0 1 1
    0.500000 0.500000

    Те ж саме, як у попередньому прикладі. Детальніше.

    ./dkr.o -v --dist 0 0 0 1 1 0 1 1
    -v captured
    --dist captured
    argv[0] = ./dkr.o
    argv[1] = -v
    argv[2] = --dist
    argv[3] = 0
    argv[4] = 0
    argv[5] = 0
    argv[6] = 1
    argv[7] = 1
    argv[8] = 0
    argv[9] = 1
    argv[10] = 1
    argc = 11
    [Point_0] X 0.000000, Y 0.000000
    [Point_1] X 0.000000, Y 1.000000
    [Point_2] X 1.000000, Y 0.000000
    [Point_3] X 1.000000, Y 1.000000
    [Point_4] X 0.500000, Y 0.500000
    Equidistant point and distance (if --dist is available):
    0.500000 0.500000
    0.707107

    Неправильно задана остання точка.

    ./dkr.o -v --dist 0 0 0 1 1 0 1 1 5
    -v captured
    --dist captured
    Invalid point!

    Для даної конфігурації точок неможливо знайти рівновіддалену точку:

    ./dkr.o --dist 0 0 0 1 1 0 1 1 5 5
    Cannot find an equidistant point for a given set of points!

    Від'ємні координати:

    ./dkr.o --dist -20 -20 20 20
    0.000000 0.000000
    28.284271

Отже, програма правильно обробляє передані для неї дані.
