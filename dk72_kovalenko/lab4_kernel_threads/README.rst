=====================
Лабораторна робота №4 
=====================

Тема
------

**Потоки ядра та методи синхронізації**

Завдання:
---------

Написати та протестувати власний модуль ядра, який:
  * содержит глобальную переменную glob_var и параметры thread_num, thread_inccnt, thread_delay
  * запускает thread_num потоков на одновременное выполнение
  * каждый поток инкрементирует переменную glob_var thread_inccnt раз с задержкой thread_delay (может быть 0 — в этом случае, без задержки), кладет значение переменной в список и завершается
  * при выгрузке модуль выводит значение переменной glob_var и содержимое списка
  * для переменной, списка, потоков использовать динамическую аллокацию. Переменную передавать в поток аргументом
  * предусматривает возможность досрочной выгрузки и будет нормально отрабатывать в этом случае

В кінцевому результаті необхідно продемонструвати результати, додати синхронізацію, прокоментувати зміни, реалізувати власну синхроніацію.

Хід роботи:
----------

При виконанні декількох потоків вони будуть незмінно взаємодіяти один з одним, щоб синхронізувати своє виконання.
Існує кілька методів синхронізації потоків:
  * Блоки взаємного виключення (Mutex);
  * Спінлоки;
  * Семафори.
  
Завдяки об'єктам синхронізації багатопоточна програма може без проблем опрацьовувати критичні ділянки коду та дозволяє
працювати потокам і при конкурентній роботі не руйнючи послідовність одне одного.

``Семафори`` - добре зрозуміла концепція в комп'ютерній науці. За своєю суттю, семафор це одне ціле значення в поєднанні з парою функцій, які зазвичай називаються Р і V. Процес, який бажає увійти в критичну секцію, викличе Р на відповідному семафорі; якщо в семафорі значення більше нуля, це значення зменшується на одиницю і цей процес проддовжується. Якщо, навпаки, в семафорі значення дорівнює 0 (або менше), процес повинен чекати, поки хто-небудь інший звільнить семафор. Розблокування семафора здійснюється викликом V, ця функція збільшує значення семафора і, якщо необхідно, будить очікують процеси.

Коли семафори використовуються для взаємного виключення, оберігаючи безліч процесів від одночасного виконання в критичній секції, їх значення буде проініціалізувати в 1. Такий семафор в будь-який даний момент часу може утримуватися тільки одним процесом або потоком. Семафор, який використовується в цьому режимі, іноді називають ``м'ютекс`` (прапор), що, звичайно ж, розшифровується як "взаємне виключення "(mutex, mutual exclusion). Майже всі семафори, знайдені в ядрі Linux, використовуються для взаємного виключення.

``Спін-блокування`` - семафори є корисним інструментом для взаємного виключення, але вони є не єдиним таким інструментом, що надаються ядром. Замість цього, більшість блокувань здійснюється механізмом, названим спін-блокуванням. На відміну від семафорів, спін-блокування можуть бути використані в коді, який не може спати, такому, як обробники переривань. При правильному застосуванні, спін-блокування пропонують в цілому більш високу продуктивність, ніж семафори. Вони, однак, мають інший набір обмежень на своє використання.

Спін-блокування - проста концепція. Спін-блокування є взаємним винятком пристрою, яке може мати тільки два значення: "заблоковано" і "розблоковано". Це зазвичай реалізується як один біт в цілому числі. Код, який бажає забрати будь-яку певну блокування, перевіряє відповідний біт. Якщо блокування доступне, "блокуючий" біт встановлюється і цей код продовжує роботу в критичній секції. Замість цього, якщо блокування вже захоплене кимось іншим, код переходить в короткий цикл, де постійно перевіряє блокування, поки воно не стане доступним. Цей цикл є "спін" частиною спін-блокування.

Звичайно, реальна реалізація спін-блокування трохи складніша, ніж опис вище. Операція "перевірити і встановити" повинна бути виконана атомарним чином, так, щоб тільки один потік зміг отримати блокування, навіть якщо кілька з них в будь-який момент часу обертаються в очікуванні доступу. Також необхідно уникати взаємоблокувань на багатопоточних (hyperthreaded) процесорах - чіпах, які реалізують кілька віртуальних процесорів на одному процесорному ядрі і кеш-пам'яті. Так що реальна реалізація спін-блокування відрізняється для кожної архітектури, підтримуваної Linux. Проте, основна концепція однакова на всіх системах, коли є суперництво за спін-блокування, процесори, які чекають, виконують короткий цикл і роблять даремну роботу.

Спін-блокування, в силу їх особливості, призначені для використання на багатопроцесорних системах, хоча однопроцесорна робоча станція, що працює на витісняє ядрі, веде себе по відношенню до конкуренції як SMP. Якби невитесняющая однопроцесорна система коли-небудь увійшла в блокуванні в цикл, вона б залишилася там назавжди; ніякий інший потік ніколи не зміг би отримати процесор для зняття блокування. З цієї причини операції спін-блокування на однопроцесорних системах без дозволеного витіснення оптимізовані, щоб нічого не робити, за винятком зміни статусу маскування переривань. Через витіснення, навіть якщо ви ніколи не очікуєте роботи свого коду на SMP системах, вам все одно доведеться здійснювати коректне блокування.

Основне правило, яке застосовується до спін-блокувань - будь-який код, що утримує спін-блокування, повинен бути атомарним. Він не може спати; фактично, він не може віддати процесор з якоїсь причини, крім обслуговування переривань (а іноді навіть і для цього).

Випадок витіснення в ядрі обробляється самим кодом спін-блокування. Кожен раз, коли код ядра утримує спін-блокування, на відповідному процесорі витіснення забороняється. Навіть однопроцесорні системи повинні забороняти витіснення, щоб таким чином уникнути стану гонок. Ось чому потрібно правильне блокування, навіть якщо ви ніколи не очікуєте запуску вашого коду на багатопроцесорній машині.

Уникнення сну під час утримання блокування може бути досить важким; багато функцій ядра можуть засинати і така поведінка не завжди добре документована. Копіювання даних в або з робочих просторів є наочним прикладом: необхідна сторінка простору користувача може вимагати обміну з диском перед тим, як копія зможе бути оброблена, і така операція явно вимагає засинання. Практично будь-яка операція, яка повинна виділити пам'ять, може заснути; ``кmаllос`` може вирішити відмовитися від процесора і очікувати, поки стане доступно більше пам'яті, якщо прямо не сказати не робити цього. Засинання може статися і в несподіваних місцях; написання коду, який буде виконуватися з спін-блокуванням, вимагає звернення уваги на кожну функцію, яку ви викликаєте.

Ось ще один сценарій: ваш драйвер виконується і саме забирав блокування, яке контролює доступ до його пристрою. Поки утримується блокування, пристрій викликає переривання, яке запускає ваш обробник переривань. Оброблювач переривань перед зверненням до пристрою також повинен отримати блокування. Отримання спін-блокування в обробнику переривання є законною річчю; це є однією з причин того, що операції спін-блокування не засинають. Але що станеться, якщо підпрограма переривання виконується тим же процесором, що і код, який до цього забрав спін-блокування? Поки обробник переривань обертається в циклі, неперервні код не буде мати можливість запуститися для зняття блокування. Цей процесор зациклиться назавжди.

Результати:
----------

Без синхронізації:

.. code-block:: bash

    / # insmod /mnt/no_sync.ko thread_num=4 thread_inccnt=20 thread_delay=5
    [   86.922562] no_sync: loading out-of-tree module taints kernel.
    [   86.931166] Task is runinng!
    [   86.931317] Task is runinng!
    [   86.931566] Task is runinng!
    [   86.932150] Task is runinng!
    [   86.933464] insmod (94) used greatest stack depth: 13720 bytes left
    / # [   87.050721] The incremention is done!
    [   87.050898] The incremention is done!
    [   87.051706] The incremention is done!
    / # rmmod no_sync
    [   87.051754] The incremention is done!
    [  106.071367] Exit jiffies is 4294773278
    [  106.072140] Delta time = 6ms
    [  106.072171] Delta time = 6ms
    [  106.072292] Delta time = 6ms
    [  106.072402] Delta time = 6ms
    [  106.072501] Delta time = 6ms
    [  106.072599] Delta time = 6ms
    [  106.072899] Delta time = 6ms
    [  106.073011] Delta time = 6ms
    [  106.073115] Delta time = 6ms
    [  106.073217] Delta time = 6ms
    [  106.073319] Delta time = 6ms
    [  106.073422] Delta time = 6ms
    [  106.073527] Delta time = 6ms
    [  106.073720] Delta time = 6ms
    [  106.073929] Delta time = 6ms
    [  106.074135] Delta time = 6ms
    [  106.074256] Delta time = 6ms
    [  106.074357] Delta time = 6ms
    [  106.074454] Delta time = 6ms
    [  106.074553] Delta time = 6ms
    [  106.074722] Delta time = 6ms
    [  106.074825] Delta time = 6ms
    [  106.074925] Delta time = 6ms
    [  106.075026] Delta time = 6ms
    [  106.075130] Delta time = 6ms
    [  106.075239] Delta time = 6ms
    [  106.075338] Delta time = 6ms
    [  106.075435] Delta time = 6ms
    [  106.075537] Delta time = 6ms
    [  106.075649] Delta time = 6ms
    [  106.075831] Delta time = 6ms
    [  106.075994] Delta time = 6ms
    [  106.076097] Delta time = 6ms
    [  106.076196] Delta time = 6ms
    [  106.076295] Delta time = 6ms
    [  106.076392] Delta time = 6ms
    [  106.076492] Delta time = 6ms
    [  106.076594] Delta time = 6ms
    [  106.076760] Delta time = 6ms
    [  106.076862] Delta time = 6ms
    [  106.076960] Delta time = 6ms
    [  106.077058] Delta time = 6ms
    [  106.077160] Delta time = 6ms
    [  106.077251] Delta time = 6ms
    [  106.077350] Delta time = 6ms
    [  106.077451] Delta time = 6ms
    [  106.077551] Delta time = 6ms
    [  106.077686] Delta time = 6ms
    [  106.077791] Delta time = 6ms
    [  106.077889] Delta time = 6ms
    [  106.077991] Delta time = 6ms
    [  106.078092] Delta time = 6ms
    [  106.078188] Delta time = 6ms
    [  106.078284] Delta time = 6ms
    [  106.078392] Delta time = 6ms
    [  106.078497] Delta time = 6ms
    [  106.078597] Delta time = 6ms
    [  106.078765] Delta time = 6ms
    [  106.078862] Delta time = 6ms
    [  106.078963] Delta time = 6ms
    [  106.079064] Delta time = 6ms
    [  106.079163] Delta time = 6ms
    [  106.079267] Delta time = 6ms
    [  106.079361] Delta time = 6ms
    [  106.079461] Delta time = 6ms
    [  106.079559] Delta time = 6ms
    [  106.079721] Delta time = 6ms
    [  106.079875] Delta time = 6ms
    [  106.080015] Delta time = 6ms
    [  106.080158] Delta time = 6ms
    [  106.080299] Delta time = 6ms
    [  106.080394] Delta time = 6ms
    [  106.080492] Delta time = 6ms
    [  106.080592] Delta time = 6ms
    [  106.080753] Delta time = 6ms
    [  106.080857] Delta time = 6ms
    [  106.080959] Delta time = 6ms
    [  106.081057] Delta time = 6ms
    [  106.081152] Delta time = 6ms
    [  106.081253] Delta time = 6ms
    [  106.081372] global var: 80
    [  106.081486] no_sync: exit
    [  106.081739] Ave Kernel!

    
Mutex:

.. code-block:: bash

    / # insmod /mnt/mutex_sync.ko thread_num=4 thread_inccnt=20 thread_delay=5
    [   93.044751] mutex_sync: loading out-of-tree module taints kernel.
    [   93.053572] Task is runinng!
    [   93.056049] insmod (93) used greatest stack depth: 13720 bytes left
    / # [   93.173350] The incremention is done!
    [   93.173681] Task is runinng!
    [   93.293912] The incremention is done!
    [   93.294166] Task is runinng!
    [   93.414434] The incremention is done!
    [   93.414847] Task is runinng!
    rmmod mutex_sync
    [   93.534324] The incremention is done!
    [  124.178330] Exit jiffies is 4294791383
    [  124.178784] Delta time = 6ms
    [  124.178816] Delta time = 6ms
    [  124.178959] Delta time = 6ms
    [  124.179056] Delta time = 6ms
    [  124.179150] Delta time = 6ms
    [  124.179217] Delta time = 6ms
    [  124.179505] Delta time = 6ms
    [  124.179600] Delta time = 6ms
    [  124.179694] Delta time = 6ms
    [  124.179788] Delta time = 6ms
    [  124.179881] Delta time = 6ms
    [  124.179975] Delta time = 6ms
    [  124.180070] Delta time = 6ms
    [  124.180160] Delta time = 6ms
    [  124.180365] Delta time = 6ms
    [  124.180479] Delta time = 6ms
    [  124.180572] Delta time = 6ms
    [  124.180662] Delta time = 6ms
    [  124.180753] Delta time = 6ms
    [  124.180843] Delta time = 6ms
    [  124.180937] Delta time = 6ms
    [  124.181028] Delta time = 6ms
    [  124.181119] Delta time = 6ms
    [  124.181269] Delta time = 6ms
    [  124.181368] Delta time = 6ms
    [  124.181471] Delta time = 6ms
    [  124.181562] Delta time = 6ms
    [  124.181651] Delta time = 6ms
    [  124.181741] Delta time = 6ms
    [  124.181831] Delta time = 6ms
    [  124.181931] Delta time = 6ms
    [  124.182040] Delta time = 6ms
    [  124.182146] Delta time = 6ms
    [  124.182344] Delta time = 6ms
    [  124.182487] Delta time = 6ms
    [  124.182599] Delta time = 6ms
    [  124.182707] Delta time = 6ms
    [  124.182816] Delta time = 6ms
    [  124.182923] Delta time = 6ms
    [  124.183038] Delta time = 6ms
    [  124.183162] Delta time = 6ms
    [  124.183396] Delta time = 6ms
    [  124.183530] Delta time = 6ms
    [  124.183658] Delta time = 6ms
    [  124.183787] Delta time = 6ms
    [  124.183918] Delta time = 6ms
    [  124.184045] Delta time = 6ms
    [  124.184171] Delta time = 6ms
    [  124.184400] Delta time = 6ms
    [  124.184525] Delta time = 6ms
    [  124.184652] Delta time = 6ms
    [  124.184790] Delta time = 6ms
    [  124.184905] Delta time = 6ms
    [  124.185019] Delta time = 6ms
    [  124.185129] Delta time = 6ms
    [  124.185307] Delta time = 6ms
    [  124.185433] Delta time = 6ms
    [  124.185542] Delta time = 6ms
    [  124.185650] Delta time = 6ms
    [  124.185757] Delta time = 6ms
    [  124.185873] Delta time = 6ms
    [  124.185980] Delta time = 6ms
    [  124.186100] Delta time = 6ms
    [  124.186269] Delta time = 6ms
    [  124.186377] Delta time = 6ms
    [  124.186481] Delta time = 6ms
    [  124.186586] Delta time = 6ms
    [  124.186688] Delta time = 6ms
    [  124.186795] Delta time = 6ms
    [  124.186902] Delta time = 6ms
    [  124.187016] Delta time = 6ms
    [  124.187124] Delta time = 6ms
    [  124.187288] Delta time = 6ms
    [  124.187413] Delta time = 6ms
    [  124.187524] Delta time = 6ms
    [  124.187638] Delta time = 6ms
    [  124.187743] Delta time = 6ms
    [  124.187865] Delta time = 6ms
    [  124.187975] Delta time = 6ms
    [  124.188095] Delta time = 6ms
    [  124.188271] global var: 80
    [  124.188401] mutex_sync: exit
    [  124.188636] Ave Kernel!


Власна:

.. code-block:: bash

    / # insmod /mnt/my_sync.ko thread_num=4 thread_inccnt=20 thread_delay=5
    / # [  177.212521] Task is runinng!
    [  177.342671] Task is runinng!
    [  177.342685] The incremention is done!
    [  177.462646] The incremention is done!
    [  177.462655] Task is runinng!
    [  177.582679] The incremention is done!
    [  177.582691] Task is runinng!
    / # rmmod my_sync
    [  177.702687] The incremention is done!
    [  182.273366] Exit jiffies is 4294849480
    [  182.273732] Delta time = 13ms
    [  182.273758] Delta time = 6ms
    [  182.273867] Delta time = 7ms
    [  182.273949] Delta time = 6ms
    [  182.274037] Delta time = 7ms
    [  182.274124] Delta time = 6ms
    [  182.274208] Delta time = 6ms
    [  182.274295] Delta time = 6ms
    [  182.274391] Delta time = 6ms
    [  182.274471] Delta time = 6ms
    [  182.274647] Delta time = 6ms
    [  182.274747] Delta time = 6ms
    [  182.274837] Delta time = 6ms
    [  182.274922] Delta time = 7ms
    [  182.275019] Delta time = 6ms
    [  182.275099] Delta time = 6ms
    [  182.275185] Delta time = 6ms
    [  182.275268] Delta time = 6ms
    [  182.275350] Delta time = 6ms
    [  182.275439] Delta time = 6ms
    [  182.275530] Delta time = 6ms
    [  182.275724] Delta time = 6ms
    [  182.275829] Delta time = 6ms
    [  182.275936] Delta time = 6ms
    [  182.276022] Delta time = 6ms
    [  182.276107] Delta time = 6ms
    [  182.276189] Delta time = 6ms
    [  182.276292] Delta time = 6ms
    [  182.276372] Delta time = 6ms
    [  182.276447] Delta time = 6ms
    [  182.276548] Delta time = 6ms
    [  182.276687] Delta time = 6ms
    [  182.276786] Delta time = 6ms
    [  182.276870] Delta time = 6ms
    [  182.276951] Delta time = 6ms
    [  182.277033] Delta time = 6ms
    [  182.277124] Delta time = 6ms
    [  182.277215] Delta time = 6ms
    [  182.277304] Delta time = 6ms
    [  182.277397] Delta time = 6ms
    [  182.277485] Delta time = 6ms
    [  182.277583] Delta time = 6ms
    [  182.277756] Delta time = 6ms
    [  182.277901] Delta time = 6ms
    [  182.277987] Delta time = 6ms
    [  182.278073] Delta time = 6ms
    [  182.278163] Delta time = 6ms
    [  182.278257] Delta time = 6ms
    [  182.278344] Delta time = 6ms
    [  182.278427] Delta time = 6ms
    [  182.278511] Delta time = 6ms
    [  182.278634] Delta time = 6ms
    [  182.278725] Delta time = 6ms
    [  182.278816] Delta time = 6ms
    [  182.278901] Delta time = 6ms
    [  182.278984] Delta time = 6ms
    [  182.279071] Delta time = 6ms
    [  182.279155] Delta time = 6ms
    [  182.279238] Delta time = 6ms
    [  182.279324] Delta time = 6ms
    [  182.279409] Delta time = 6ms
    [  182.279493] Delta time = 6ms
    [  182.279631] Delta time = 6ms
    [  182.279718] Delta time = 6ms
    [  182.279804] Delta time = 6ms
    [  182.279893] Delta time = 6ms
    [  182.279979] Delta time = 6ms
    [  182.280061] Delta time = 6ms
    [  182.280142] Delta time = 6ms
    [  182.280224] Delta time = 6ms
    [  182.280309] Delta time = 6ms
    [  182.280395] Delta time = 6ms
    [  182.280482] Delta time = 6ms
    [  182.280576] Delta time = 6ms
    [  182.280688] Delta time = 6ms
    [  182.280776] Delta time = 6ms
    [  182.280867] Delta time = 6ms
    [  182.280952] Delta time = 6ms
    [  182.281030] Delta time = 6ms
    [  182.281113] Delta time = 6ms
    [  182.281207] global var: 80
    [  182.281301] my_sync: exit
    [  182.281475] Ave Kernel!


Висновки:
--------
При виконанні даної лабораторної роботи було створено модуль ядра для демонстрації роботи потоків та синхронізації.Як видно з результатів відпрацювання модуля для коректної роботи модуля потрібно додатити синхронізацію до критичних частин коду, пілся додання синхронізації було отримано очікувані результати. Варіант без синхронізації, як і очікувалось працював неправильно, і якщо змінна втрачала відсотки значення, то довжина списку скорочувалася в десять і більше разів. При додаванні спінлока все стало працювати правильно, також було написано свій спінлок за допомогою атомарних операцій і перевірено його роботу. Інструменти синхронізації використовуються в основному для захисту критичних точок спрацювання ядра.
