Завдання лабораторної роботи:
======
 
- Написати програму на мові С з використанням бібліотеки pthreads.h. 
- Программа повинна ітерувати змінну в двох потоках. 
- Далі потрібно з компілювати програму з флагами оптимізації -о0 -о2 на ARM та x86.
- Порівняти результати компіляції на різних системах та з різними оптимізаціми.


Виконання завдання
---------
Програма була написана, її лістинг можна бачити в папці src. В цій папці 
є 3 файли: Makefile, та два ``.c`` файли. Один з файлів використовує 
аргумент командного рядку для задання значення змінної, що буде 
ітеруватися.

Система х86 має атомарну систему команд та має спеціальну команду для ітерації - ``inc``. Ця команда є неділимою, тобто при виконанні багатопоточної програми інший поток не може перехватити управління,що можливе при виконанні багатопоточної програми на неатомарних архітектурах типу ARM. Тобто при виконанні моєї програми на архітектурі ARM можливо те ,що деякі результати ітерації втратяться, через те, що другий потік може перервати виконання першого. 

Тест 1
--------

Запуск програми без оптимізації на x64 Manjaro
~~~~~~~~~~~~~~

  .. image:: img/1.jpg

*Результат виконання програми без оптимізації*

Як видно з скріншоту, програма виконалася правильно, потоки запустилися відносно одночасно, різниця між різними викананнями полягає в тому, що при першому виконанні спочатку закінчив свою роботу перший потік, при другому виконанні потоки завершили свою роботу відносно одночасно.

Тест 2
---------

Запуск програми з оптимізацією на x64 Manjaro
~~~~~~~~~~~~~~

  .. image:: img/2.jpg

*Результат виконання програми з оптимізацією -o2*
 
При першому виконанні можна бачити, що спочатку закінчилася ітерація в першому потоці, потім створився другий потік, і потім перший потік закінчив свою роботу. Через те, що другий потік створився після ітерації першого, це значно збільшило час виконання програми вцілому, порівнюючи з виконанням програми без оптимізації.
 
Тест 3
--------

Запуск програми на платі BeagleBoard-Mx без оптимізації
~~~~~~~~~
 
  .. image:: img/o1.png


*Результат виконання програми на платі без оптимізації*
   
   
Виконання на платі також відбулось без помилок, спочатку запустилися потоки, завершилася ітерація в обох потоках, потоки закрились.

Тест 4
-------

Запуск програми на платі з оптимізацією -о2
~~~~~~~~~~

  .. image:: img/o2.png

*Результат виконання програми з оптимізацією -o2*
   
   
При виконанні програми на платі та з оптимізацією потоки створються майже одночасно, але перший потік виконався швидше. В цьому випадку програма виконується довше, ніж програма без оптимізації.

Висновок
=======
Отримані результат не збігаються з очікуваними. Я очікував, що виконання програми на платі відбудеться з помилками через неатомарність архітектури, на основі якої вона була створена. Причина такої "ідеальності"  поки мені не відома.
