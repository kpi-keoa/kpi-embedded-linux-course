============================================================
**Лабораторна робота №2 Використання таймерів та тасклетів**
============================================================

**Завдання:**
~~~~~~~~~~~~~
Написати модуль який приймає два аргументи: **cnt**, **delay**.

При ініціалізації (*module_init*) модуль виводить значення *jiffies*, створює масив розміром **cnt**, запускає *tasklet* який виводить значення *jiffies* та запускає *hrtimer* із затримкою **delay** мс, що записує **cnt** значень *jiffies* у масив.
При розвантаженні модуль знову виводить значення *jiffies* та друкує отриманий масив.

Xiд роботи
----------
Allocating Memory
~~~~~~~~~~~~~~~~~

Виділення пам'яті відбувається за допомогою `kmalloc()`

Флаг GFP_KERNEL дозволяє перервати поточний процес, якщо памяті на даний момент недостатньо для виділення.

Обробник переривання повинен швидко відпрацьовувати.
В перериванні велика затримка може призвести до падіння, тому потрібно використовувати `GFP_KERNEL|GFP_ATOMIC`.

GFP_ATOMIC працює жорсткіше: його використовують в прериваннях, аби виділити память вже і зразу. Пробує виділити як GFP_KERNEL,
але якщо памяті немає, то виділяє із резервних пулів. Процес не призупиняється.


**Використані бібліотеки**

* ``<linux/module.h>`` - потрібна для всіх модулів   
* ``<linux/kernel.h>`` - заголовки ядра    
* ``<linux/init.h>`` - використовується для ініціалізації та деініціалізації    
* ``<linux/jiffies.h>`` - лічильник
* ``<linux/interrupt.h>`` - необхідна для використанні тасклетів
* ``<linux/timer.h>`` - необхідна для використання hr тамерів
* ``<linux/slab.h>`` - необхідна для виділення пам'яті

Результат
---------

.. code-block:: bash

	/ # insmod /mnt/lab_2.ko
	[  109.176672] lab_2: loading out-of-tree module taints kernel.
	[  109.327308] init module>> jiffies = 4294776659
	[  109.327308] tasklet>> jiffies = 4294776659
	[  109.402574] insmod (99) used greatest stack depth: 13288 bytes left
	/ # rmmod lab_2
	[  158.628442] exit module>> jiffies= 4294825953
	[  158.632568] timer >> array[0] jiffies= 4294776774
	[  158.649835] timer >> array[1] jiffies= 4294776873
	[  158.651110] timer >> array[2] jiffies= 4294776972
	[  158.653064] timer >> array[3] jiffies= 4294777073
	[  158.656079] timer >> array[4] jiffies= 4294777173
	/#

.. code-block:: bash

	/ # insmod /mnt/lab_2.ko cnt=10 delay=0
	[  257.874308] init module>> jiffies = 4294925205
	[  257.881999] tasklet>> jiffies = 4294925213
	[  257.884145] init>> delay = 0
	/ # rmmod lab_2
	[  264.872132] exit module>> jiffies= 4294932203
	[  264.874041] timer >> array[0] jiffies= 4294925217
	[  264.878322] timer >> array[1] jiffies= 4294925218
	[  264.882942] timer >> array[2] jiffies= 4294925218
	[  264.885697] timer >> array[3] jiffies= 4294925220
	[  264.888069] timer >> array[4] jiffies= 4294925220
	[  264.891531] timer >> array[5] jiffies= 4294925220
	[  264.892090] timer >> array[6] jiffies= 4294925220
	[  264.893110] timer >> array[7] jiffies= 4294925224
	[  264.895291] timer >> array[8] jiffies= 4294925225
	[  264.896805] timer >> array[9] jiffies= 4294925229
	/ #

.. code-block:: bash

	/ # insmod /mnt/lab_2.ko cnt=10 delay=1000
	[  319.036262] init module>> jiffies = 4294986367
	[  319.039590] tasklet>> jiffies = 4294986371
	/ # rmmod lab_2
	[  323.178879] exit module>> jiffies= 4294990510
	[  323.183154] exit >> timer is queued
	[  323.187275] exit >> Killed timer_1
	[  323.192838] timer >> array[0] jiffies= 4294987375
	[  323.195420] timer >> array[1] jiffies= 4294988375
	[  323.198713] timer >> array[2] jiffies= 4294989375
	[  323.199364] timer >> array[3] jiffies= 4294990375
	/ #

**Використані макроси та функції**

``MODULE_DESCRIPTION`` - макрос для опису модуля    

``MODULE_AUTHOR`` - автор модуля    

``MODULE_VERSION`` - версія модуля    

``MODULE_LICENSE`` - тип ліцензії  

``module_param`` - передача параметрів в модуль    

``MODULE_PARM_DESC`` - опис параметра

``printk`` - виведення інформації в лог ядра
    
``kzalloc`` - виділення пам'ті в адресному просторі ядра, з обнуленням її вмісту

``GFP_KERNEL`` - виділення пам'яті у адресному просторі ядра

``enum hrtimer_restart timer_handler`` - функція-обробник переривань таймера

``tasklet_schedule`` - призначення тасклету функції обробника

``kfree`` - вивільнення пам'яті

``tasklet_kill`` - припинення роботи тасклета

Висновок
--------
Отже в даній роботі я розібрався з *tasket*, *hrtimer* і правильним виділенням пам'яті.
Реалізував модуль який відповідає вимогам завдання.