=============================================
Лабораторная работа №2
=============================================

Цели: 
	- Собрать модуль ядра с функцией вывода текущего значения jiffies в логи ядра
	- Повторить с использованием tasklets
	- Измерить значение jiffies для arm и x86 архитектур и сравнить с реальным отсчётом значения времени
	- Добавить возможность передачи параметра при загрузке модуля
	- Выяснить существует ли разница в значении jiffies в tasklet и init вызовах


С помощью секундомера было измерено время тика jiffies.
Анализ проводилися с базовым firstmod.c модулем ядра, задача которого выводить переданный параметр и значение jiffies на момент загрузки в ядро.
Ранне указанные данные вычитываются из логов ядра **dmesg -k | tail -5**.

Значение частоты тика jiffies равны переменной 300Hz для x86 архитектуры.
Для определения часототы тика необходимо сконфигурировать параметр **HZ** в файле` /proc/config.gz `.
	
Также можно узнать уже `сконфигурированную частоту <https://stackoverflow.com/a/57879202/5750172>`__.	

Также модуль был дополнен функцией вывода jiffies в специальном tasktel`e и добавлена возможность передачи параметров в модуль ядра.
На примере параметра "username" появилась возможность передать параметр в формате имени пользователя в исполняемую часть модуля ядра при его загрузке.

В качестве Embedded development board была использована `VisionSom-6ULL <https://wiki.somlabs.com/index.php/VisionSOM-6ULL>`__ с **armv7l** архитектурой. 

Сборка модуля ядра
-----
	::
	
		# make [clean]
		# insmod src/firstmod.ko username="username" - встроить модуль с параметром
		# rmmod firstmod - изъять модуль из ядра
		# dmesg -k | tail -5 - Вывод лога ядра в stdout 


Интерпретация результатов для **x86_64** 
-----

**Значение jiffies в дапазоне реальных 10 секунд**

	.. image:: img/difference_jifx86.png

**Рассчитанная разница jiffies в секундах**

	.. image:: img/diff_pythonresultx86.png
	
**Вывод логов модуля firstmod**

	.. image:: img/x86result_klog.png

На данном изображении видно:
	- Успешно переданный параметр 
	- Успешно запущенный tasklet
	- Успешно выведенное значение tasklet`a

Сборка образа Linux для работы с модулем ядра
------
Базово планировалось использовать `Debian Stretch 9.2 (4.1.15) for VisionSOM-6ULL <https://wiki.somlabs.com/index.php/Debian_Stretch_9.2_(4.1.15)_for_VisionSOM-6ULL>`__ .

Как указано выше, версия ядра используется 4.1.15. Главная цель-собрать модуль для целевого ядра.Для этого нужны соответствующие **linux headers**. Логично было бы обновить ядро его вручную или установить с открытых репозиториев, но встроенный пакетный менеджер не предоставляет другие версии ядра.
Так же было выкачано пакет `linux-headers-4.1.15+_4.1.15+-2_armhf.deb`. Оказалось, что dpkg не в состоянии собрать такой старый пакет т.к. ему нужны завимости, которые не так просто найти, а именно gcc-4.70.

Было принято решение собирать кастомный Embedded linux дистрибутив для конкретно используемой отладочной платы. Для решение этой задачи необходимо было задействовать **Yocto Project**.

Компания производитель NXP предлагает собирать свои дистрибутивы с помощью `данной инструкции <https://wiki.somlabs.com/index.php/Yocto_for_VisionSOM-6ULL/6UL>`__ , следуя которой был сборан конечный образ.

Также стоит обратить внимание, что сборщик Bitbake гарантировано собирается только на одном дистрибутиве - **Ubuntu 16+**.

Лучшим решением для "виртуализации" было использование `Docker образа <https://hub.docker.com/r/gmacario/build-yocto/>`__ с предустановленными инструментами и библиотеками для сборки.

**Процесс сборки образа**
  
	.. image:: img/yocto-example.png

**Завершенная сборка**
  
	.. image:: img/complete.png

**Собранный образ**
  
	.. image:: img/ready_wic.png

**Новая версия ядра**

	.. image:: img/uname_updated.png
	
Выводы
-----
Был проведен ряд работ, направленный на изучение работы с модулем ядра и такими понятиями как jiffies, tasklets и пр. Был собран образ Linux с обновленным модулем ядра для платы разработки для полноценной работы с модулями ядра в будущем. Также было исследовано значение jiffies для x86 архитектуры.С изображения видно, что разница в значении jiffies при инициализации и в tasklet одинакова.Можно предположить, что загрузка модуля и включение тасклета происходит за один такт, а не за два.

