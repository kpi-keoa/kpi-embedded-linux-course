=====================
Лабораторна робота #2
=====================

Завдання:
---------

Написати модуль ядра, який:
	* приймає 2 параметри *t_cnt* і *y_delay*:
		- *t_cnt* - кількість циклів, які повинен опрацювати таймер;
		- *t_delay* - затримка між двома спрацюваннями таймера;
		- модуль повинен відпрацьовувати при *t_cnt* і *t_delay* рівних нулю;
	* запускає тасклет, який повинен надрукувати своє значення *jiffies* в лог ядра;
	* виділяє масив розміру *t_cnt*, використовуючи динамічну алокацію;
	* *init* запускає таймер з затримкою *t_delay* і функція завершується;
		- при спрацюванні таймер кладе поточне значення *jiffies* до масиву і перезапускається з затримкою *t_delay*;
		- загальна кількість разів, які запускається таймер дорівнює *t_cnt*;
	* в *exit* модуль повинен надрукувати поточне значення *jiffies* і вивести всі значення з масиву.

Хід роботи:
----------
Першим кроком було створено два параметри *t_cnt* і *t_delay* за допомогою:
    -`module_param()`
    -`MODULE_PARM_DESC`

Створено массив *assert_array* розміром *t_cnt* в який буде записуватися значення *jiffies* при виклику функції обробника таймеру *study_timer*. Алокація пам'яті до цього масиву відбувається за допомогою *kzalloc*, тобто усі комірки цього масиву ініціалізовані нулями.

Далі створюємо таймер *study_timer* та функцію обробник даного таймера *t_callback*. У функції обробнику значення *jiffies* буде записуватися *t_cnt* разів до масиву *assert_array*.
    - таймер об'являється за допомогою `DEFINE_TIMER`, використовуючи цей метод кернел сам створить необхідну структуру *timer_list*
    - модифікації і запуску таймеру `mod_timer()`

Наступним кроком створюємо тасклет *study_tasklet* та його функцію обробник *tasklet_handler*.
    - для об'явлення тасклету використовуємо `DECLARE_TASKLET()`
    - запуск тасклету зі звичайним пріорітетом `tasklet_schedule()`

У функції `init` перевіряємо вхідні параметри на корректність (якщо дані не коректні, то виводимо повідомлення у лог), ініціазуємо масив, тасклет та запускаємо таймер, якщо параметри корректні.

У функції `exit` виводимо поточне значення *jiffies*, виводимо значення масиву *assert_array* та виконуємо деалокаію ресурсів:
    - тасклет - `tasklet_kill()`
    - таймер - `del_timer()`
    - масив - `kfree()`

Результат
---------

.. code-block::


    Якщо *t_cnt* дорівнює 0. Друкує помилку в лог ядра за допомогою `pr_err()`.
    Не створює масив і не запускає таймер.
    / # insmod /mnt/module_lab2.ko t_delay=30 t_cnt=0
    [  366.050613] Mod Init: jiffies = 4295033377
    [  366.057090] Mod Init: t_cnt <= 0
    [  366.057622] Tasklet: jiffies = 4295033384
    insmod: can't insert '/mnt/module_lab2.ko': Operation not permitted


    Якщо *t_delay* дорівнює 0. Друкує попередження в лог ядра за допомогою `pr_warn()`.
    Не створює масив і не запускає таймер.
    / # insmod /mnt/module_lab2.ko t_delay=0 t_cnt=4
    [  188.470768] Mod Init: jiffies = 4294855797
    [  188.470798] Mod init: t_delay = 0
    [  188.470798] Tasklet: jiffies = 4294855797
    / # rmmod module_lab2
    [  230.836260] Mod Exit: jiffies = 4294898163
    [  230.837127] Timer Result:
    [  230.837172] [0] = [4294855807]
    [  230.837825] [1] = [4294855808]
    [  230.838056] [2] = [4294855809]
    [  230.838293] [3] = [4294855813]


    Якщо модуль вигрузити ніж таймер встигне відпрацювати повністю вивести повідомлення в лог.
    / # insmod /mnt/module_lab2.ko t_delay=300 t_cnt=450
    [  537.512568] Mod Init: jiffies = 4295204839
    [  537.515554] Tasklet: jiffies = 4295204842
    / # rmmod module_lab2
    [  539.732652] Mod Exit: jiffies = 4295207059
    [  539.733466] Exit called while timer is pending
    [  539.733995] Timer Result:
    [  539.734045] [0] = [4295205148]
    [  539.734561] [1] = [4295205463]
    [  539.734930] [2] = [4295205768]
    [  539.735218] [3] = [4295206072]
    [  539.735439] [4] = [4295206385]
    [  539.735680] [5] = [4295206693]
    [  539.735973] [6] = [4295207001]




Висновок
--------
На даній лабораторній роботі було створено модуль, який відповідає завданню, вивчено теоретичну частину про таймери і тасклети, як їх ініціалізувати і запускати. Також був отриманий чудовий досвід, як виділяти пам'ять для масиву. Даний модуль працює коректно.

