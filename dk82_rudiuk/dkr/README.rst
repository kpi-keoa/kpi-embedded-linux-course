==============================
**Домашня контрольна робота**
==============================

**Завдання:**
~~~~~~~~~~~~~
Написати програму, яка:
    * приймає аргументи командного рядка, для парсингу використати *Argp*;
    * збирається за допомогою *Make*, *Makefile* містить додаткові цілі *build* і *clean*, де *build* є метою-посиланням на основну, а *clean* – PHONY - метою, що очищає всі артефакти складання;
    * виводить результат у *stdout*, а помилки – у *stderr*;
    * містить частину службових функцій, винесених в окремий модуль *utils* (*utils.c* та *utils.h*);
    * використовує прапорець *--verbose* (*-v*), який змушує програму виводити виконувані дії детально, інакше вважається, що її висновок використовуватиметься іншою прогамою;
    * повертає *exit code 0* у разі успішного завершення, відповідний код помилки інакше, для визначення помилок використати *enum*;
    * використовує об'єктний стиль коду для внутрішніх конструкцій, що реалізують основний функціонал;
    * програма реалізує бітовий калькулятор з операціями SET BIT/BITS, UNSET BIT/BITS, FLIP BIT/BITS, програма приймає аргументи у вигляді 2-чного (0b...), 10-чного (...), 16-чного (0x...) запису.

**Хід роботи:**
~~~~~~~~~~~~~~~

    * Дана програма має можливість змінювати заданий біт або біти числа відповідно до завдання.
    * Спочатку виконується перевірка правильності введення аргументів та їх параметрів.
    * Можна використовувати аргументи тільки за їх прямою функцією (якщо була введена команда для встановлення одного біта, але було передано декілька номерів бітів, то це вважається помилкою.
    * Для правильної роботи програми як параметр обов'язково необхідно передати число для зміни на першому місці. Далі слідує один параметр-оператор та аргументи для нього (номер/номери бітів).
    * Програма здатна змінювати біти числа, заданого в двійковій, десятковій та шістнадцятковій системах.
    * Аби провести операції з числом, яке було передане у шістнадцятковій або двійковій системі числення, воно переводиться у десяткову систему, після чого переводиться назад для відображення.

**Результат:**
~~~~~~~~~~~~~~

.. code-block:: bash

    Запуск без аргументів.

    ./dkr.o
    No arguments!
    Bit calculator
    Version 1.0

        The program implements a bit calculator
        with the operations SET BIT / BITS, UNSET BIT / BITS, FLIP BIT / BITS.
        The program accepts arguments in the form of
        binary (0b...), decimal (...), hexadecimal (0x...) notation

    Arguments:
            -sb     Set bit
            -sbs    Set bits
            -usb    Unset bit
            -usbs   Unset bits
            -fb     Flip bit
            -fbs    Flip bits
            -v (--verbose)  Detailed program output
            -help (--help, help)    View help

    Якщо ввести забагато параметрів для оператора, який передбачає тільки один параметр

    ./dkr.o 10 -sb 1 2
    Too many arguments!

    Встановлення 0 та 1 біта числа 15 в нуль (для числа в десятковій системі)

    ./dkr.o -v 15 -usbs 0 1
    argv[0] = ./dkr.o
    argv[1] = -v
    argv[2] = 15
    argv[3] = -usbs
    argv[4] = 0
    argv[5] = 1
    argc = 6
    Radix: 1
    NUMBER = 15
    DECIMAL!
    New value: 12

    Отримали 12, як і очікувалось

    Заміна біта на протилежний (для числа в десятковій системі)

    ./dkr.o -v 15 -fb 3
    argv[0] = ./dkr.o
    argv[1] = -v
    argv[2] = 15
    argv[3] = -fb
    argv[4] = 3
    argc = 5
    Radix: 1
    NUMBER = 15
    DECIMAL!
    New value: 7

    Заміна декількох бітів на протилежні (для числа в десятковій системі)

    ./dkr.o 15 -fbs 5 6 7
    239

    Приклад для чисел в шістнадцятковій системі:

    1)

    ./dkr.o -v 0xF -usb 2
    argv[0] = ./dkr.o
    argv[1] = -v
    argv[2] = 0xF
    argv[3] = -usb
    argv[4] = 2
    argc = 5
    Radix: 2
    NUMBER = F
    HEX!
    New value: B

    2)

    /dkr.o 0x42E -fbs 3 4 8 11
    D36

    Приклад для числа в двійковій системі:

    ./dkr.o 0b11010 -sbs 5 0 2
    111111
