=============================================
Лабораторна робота №5
=============================================

Тема
------

**Workqueue**

Завдання:
-------
Написати та зібрати  власний модуль ядра, який:
	* Принимает аргументы th_val, wrk_val и jffdelay, реализует два потока и ворк (в дефолтном work queue), а также таймер (на базе timer wheel)
	* Запускает таймер и ворк
	* При срабатывании таймера проверяет текущее значение jiffies, если оно кратно th_val – остановить первый поток; иначе – таймер перезапускается через jffdelay jiffies
	* Внутри ворка проверяет текущее значение jiffies, если оно кратно wrk_val - остановить второй поток; иначе – ворк должен уснуть на jffdelay jiffies и перезапустить себя.

А також:
	* Проверить работу. Для th_val и wrk_val желательно выбирать простые числа
	* Добавить два связных списка, в которые аллоцировать и добавлять элементы со значениями jiffies которые не привели к завершению первого и второго потоков соответственно. Получается связь "таймер – 1й список – 1й поток" и  "ворк – 2й список – 2й поток"
	* При выходе из потока распечатать список
	* Внутри ворка и таймера использовать правильные аллокации для новых элементов списка, правильную синхронизацию доступа к списку
	* Предусмотреть, что пользователь может выгрузить модуль досрочно

Хід роботи
-------

При виконанні даної лабораторної роботи було застосовано таймери (timer whell), потоки і списки. Все це було вже використано при виконанні попередніх лабораторних робіт.Серед нових елементів, які були використані в даній лабораторній роботі, є workqueue. Workqueue, як і tasklet з поперездньої лабораторної, служать для відкладеної обробки данних, але, на відміну від tasklet'ів, вони виконуються в контексті потоку, і вони не є атомарними і тому можуть спати.

Виконання функції в контексті переривання повинно відбуватися максимально швидко. Тому якщо потрібно драйверу в момент переривання виконати 
якийсь великий обсяг роботи, то має сенс помістити функцію в чергу завдань (workqueue), для її відкладеного виконання. Після приміщення функції в чергу (за допомогою функції schedule_work),
вона буде виконана, коли до неї дійде черга в контексті ядра(як то кажуть вистрелить коли потрібно). 
Також варто відмітити, що workqueue обробляється спеціальними потоками, які звуться worker-ами. Worker-и забезпечують асинхронне виконання work'ов з workqueue.
Хоча вони й викликають work'и в порядку черги, але в загальному випадку про послідовне виконання мови не йде: все-таки тут мають місце витіснення, сон, очікування і т.д.

В підсумку варто перевести переваги workqueue над tasklet:
  * Мають гнучкий API (підтримується більше опцій / прапорів);
  * Призначені для більш високої затримки;
  * Можуть спати.

Результати тестування:
----------

.. code-block:: bash


	/mnt # insmod work.ko th_val=1
	[   42.033348] Module started with parameters:
	[   42.036793] th_val = 1
	[   42.038863] wrk_val = 11
	[   42.041199] jffdelay = 100
	[   42.041199] 
	[   42.045810] timer thread was stopped at jiffies = 4294709225
	[   42.050638] timer_thread was finished
	/mnt # [   42.668800] work thread was stopped at jiffies = 4294709848
	[   42.669793] work jiffies = 4294709224
	[   42.670591] work jiffies = 4294709328
	[   42.671382] work jiffies = 4294709432
	[   42.672165] work jiffies = 4294709536
	[   42.672950] work jiffies = 4294709640
	[   42.673725] work jiffies = 4294709744
	[   42.674265] work_thread was finished
	/mnt # rmmod work
	[   47.101416] Goodbye:)
	/mnt # 





Висновки:
--------
При виконанні даної лабораторної роботи було створено модуль ядра для демонстрації роботи workqueue.
синхронізація завершення потоків а також синхронізація між потоками  була зроблення за допомогою флагів. 
Таймер був зроблений на базі таймер wheel при закритті таймеру було використану sync версію функції таким 
чином таймер закриється на якому ядрі він би не працював.




